// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package queries

import (
	"context"
)

const checkIsSeeded = `-- name: CheckIsSeeded :one
SELECT EXISTS (
        SELECT 1
        FROM pokemon
    )
`

func (q *Queries) CheckIsSeeded(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, checkIsSeeded)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPokemon = `-- name: CreatePokemon :exec
INSERT INTO pokemon (id, name)
VALUES ($1, $2)
`

type CreatePokemonParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) error {
	_, err := q.db.Exec(ctx, createPokemon, arg.ID, arg.Name)
	return err
}

const getResults = `-- name: GetResults :many
SELECT p.id,
    p.name,
    COUNT(
        CASE
            WHEN v.voted_for_id = p.id THEN 1
        END
    ) AS votes_for,
    COUNT(
        CASE
            WHEN v.voted_against_id = p.id THEN 1
        END
    ) AS votes_against
FROM pokemon p
    LEFT JOIN vote v ON p.id = v.voted_for_id
    OR p.id = v.voted_against_id
GROUP BY p.id,
    p.name
ORDER BY p.id
`

type GetResultsRow struct {
	ID           int32
	Name         string
	VotesFor     int64
	VotesAgainst int64
}

func (q *Queries) GetResults(ctx context.Context) ([]GetResultsRow, error) {
	rows, err := q.db.Query(ctx, getResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsRow
	for rows.Next() {
		var i GetResultsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.VotesFor,
			&i.VotesAgainst,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTwoRandomPokemon = `-- name: GetTwoRandomPokemon :many
SELECT id, name
FROM pokemon
ORDER BY RANDOM()
LIMIT 2
`

func (q *Queries) GetTwoRandomPokemon(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, getTwoRandomPokemon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVote = `-- name: InsertVote :exec
INSERT INTO vote (voted_for_id, voted_against_id)
VALUES ($1, $2)
`

type InsertVoteParams struct {
	VotedForID     int32
	VotedAgainstID int32
}

func (q *Queries) InsertVote(ctx context.Context, arg InsertVoteParams) error {
	_, err := q.db.Exec(ctx, insertVote, arg.VotedForID, arg.VotedAgainstID)
	return err
}
